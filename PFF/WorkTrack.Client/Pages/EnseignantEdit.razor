@page "/enseignants/{Id:guid}/edit"
@using WorkTrack.Client.Models
@inject HttpClient Http
@inject NavigationManager Nav
@inject WorkTrack.Client.Services.IEnseignantsService EnseignantsService
@inject IJSRuntime JS


<div class="overlay">
    <div class="modal-box">
        <h3>✏️ Modifier un enseignant</h3>

        @if (_loading)
        {
            <p>Chargement des données...</p>
        }
        else if (_notFound)
        {
            <div class="alert alert-warning">Enseignant introuvable.</div>
        }
        else
        {
            <EditForm Model="_model" OnValidSubmit="OnSubmitAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">Utilisateur</label>
                    <InputSelect @bind-Value="_model.UtilisateurId" class="form-select" required>
                        <option value="">-- Sélectionner un utilisateur --</option>
                        @foreach (var u in _utilisateurs)
                        {
                            <option value="@u.Id">@u.Prenom @u.Nom (@u.Email)</option>
                        }
                    </InputSelect>
                </div>

                <div class="mb-3">
                    <label class="form-label">Spécialité</label>
                    <InputText @bind-Value="_model.Specialite" class="form-control" />
                </div>

                <div class="d-flex gap-2 justify-content-end">
                    <button class="btn btn-primary" type="submit" disabled="@_saving">
                        @(_saving ? "Enregistrement..." : "Enregistrer")
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Annuler</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter] public Guid Id { get; set; }

    private bool _loading = true;
    private bool _saving = false;
    private bool _notFound = false;

    private List<UtilisateurDto> _utilisateurs = new();
    private EnseignantCreateOrUpdateDto _model = new();

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _notFound = false;

        try
        {
            _utilisateurs = await Http.GetFromJsonAsync<List<UtilisateurDto>>("api/utilisateurs") ?? new();

            var enseignant = await EnseignantsService.GetByIdAsync(Id);
            if (enseignant is null)
            {
                _notFound = true;
                return;
            }

            _model = new EnseignantCreateOrUpdateDto
            {
                UtilisateurId = enseignant.UtilisateurId == Guid.Empty ? null : enseignant.UtilisateurId,
                Specialite = enseignant.Specialite
            };
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
            await JS.InvokeVoidAsync("alert", "Erreur lors du chargement des données.");
        }
        finally
        {
            _loading = false;
        }
    }

    private void Cancel()
    {
        Nav.NavigateTo("/enseignants");
    }

    private async Task OnSubmitAsync()
    {
        if (!_model.UtilisateurId.HasValue || _model.UtilisateurId.Value == Guid.Empty)
        {
            await JS.InvokeVoidAsync("alert", "Veuillez sélectionner un utilisateur.");
            return;
        }

        _saving = true;
        try
        {
            var ok = await EnseignantsService.UpdateAsync(Id, _model);
            if (ok)
            {
                await JS.InvokeVoidAsync("alert", "✅ Enseignant modifié avec succès !");
                Nav.NavigateTo("/enseignants");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Erreur lors de la modification.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
            await JS.InvokeVoidAsync("alert", "Erreur lors de la modification.");
        }
        finally
        {
            _saving = false;
        }
    }
}

<style>
    .overlay {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: linear-gradient(to right, #e0f7fa, #f1f8e9);
        padding: 1rem;
    }

    .modal-box {
        background-color: #ffffff;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        width: 500px;
        max-width: 100%;
        animation: fadeIn 0.5s ease-in-out;
    }

    keyframes fadeIn {
        from { opacity: 0; transform: scale(0.95); }
        to { opacity: 1; transform: scale(1); }
    }

    h3 {
        text-align: center;
        margin-bottom: 1.5rem;
        color: #0277bd;
    }

    .form-label {
        font-weight: bold;
        color: #333;
    }

    .btn-primary {
        background-color: #1976d2;
        border: none;
        transition: background-color 0.3s ease;
    }

    .btn-primary:hover {
        background-color: #1565c0;
    }

    .btn-secondary {
        background-color: #9e9e9e;
        border: none;
        transition: background-color 0.3s ease;
    }

    .btn-secondary:hover {
        background-color: #757575;
    }
</style>









