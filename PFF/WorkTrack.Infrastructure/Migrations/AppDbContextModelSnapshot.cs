// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkTrack.Infrastructure;

#nullable disable

namespace WorkTrack.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WorkTrack.Domain.Entities.AffectationModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("DateDebut")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateFin")
                        .HasColumnType("date");

                    b.Property<Guid>("EnseignantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SemestreId")
                        .HasColumnType("uuid");

                    b.Property<short?>("VolumeHorairePrevu")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId", "PromotionId", "EnseignantId", "SemestreId")
                        .IsUnique();

                    b.ToTable("affectations_modules", (string)null);
                });

            modelBuilder.Entity("WorkTrack.Domain.Entities.AnneeAcademique", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateDebut")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateFin")
                        .HasColumnType("date");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("annees_academiques", (string)null);
                });

            modelBuilder.Entity("WorkTrack.Domain.Entities.Apprenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateNaissance")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Matricule")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Statut")
                        .HasColumnType("integer");

                    b.Property<Guid>("UtilisateurId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Matricule")
                        .IsUnique();

                    b.ToTable("apprenants", (string)null);
                });

            modelBuilder.Entity("WorkTrack.Domain.Entities.Enseignant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Specialite")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("UtilisateurId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId")
                        .IsUnique();

                    b.ToTable("enseignants", (string)null);
                });

            modelBuilder.Entity("WorkTrack.Domain.Entities.Filiere", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Niveau")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid?>("ResponsableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("filieres", (string)null);
                });

            modelBuilder.Entity("WorkTrack.Domain.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<short?>("Coefficient")
                        .HasColumnType("smallint");

                    b.Property<short?>("Ects")
                        .HasColumnType("smallint");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("modules", (string)null);
                });

            modelBuilder.Entity("WorkTrack.Domain.Entities.Presence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApprenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("Justifie")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("MarqueLe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("MarquePar")
                        .HasColumnType("uuid");

                    b.Property<short?>("MinutesRetard")
                        .HasColumnType("smallint");

                    b.Property<Guid>("SeanceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SeanceId", "ApprenantId")
                        .IsUnique();

                    b.ToTable("presences", (string)null);
                });

            modelBuilder.Entity("WorkTrack.Domain.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnneeScolaire")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<int?>("EffectifPrevu")
                        .HasColumnType("integer");

                    b.Property<Guid?>("FiliereId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Nom", "AnneeScolaire")
                        .IsUnique();

                    b.ToTable("promotions", (string)null);
                });

            modelBuilder.Entity("WorkTrack.Domain.Entities.ResponsablePedagogique", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UtilisateurId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("responsables_pedagogiques", (string)null);
                });

            modelBuilder.Entity("WorkTrack.Domain.Entities.Seance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AffectationId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreeLe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreePar")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Debut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EstVerrouillee")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Fin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Salle")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AffectationId", "Debut");

                    b.ToTable("seances", (string)null);
                });

            modelBuilder.Entity("WorkTrack.Domain.Entities.Semestre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnneeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<short>("Rang")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AnneeId", "Rang")
                        .IsUnique();

                    b.ToTable("semestres", (string)null);
                });

            modelBuilder.Entity("WorkTrack.Domain.Entities.Utilisateur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Actif")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MotDePasseHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("utilisateurs", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
